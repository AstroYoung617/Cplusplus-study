//C++语言没有明确规定大多数二元运算符的求值顺序，给编译器优化留下了余地。
这种策略实际上是在代码生成效率和程序潜在缺陷之间进行了权衡，你认为这可以接受吗？请说出你的理由。

解答：
	我认为可以接受，对于大多数运算而言，二元运算符的左右两边是字面值，只有当两边都是表达式或函数的时候，才有可能出现问题。
	这样的情况可以由程序员进行添加括号等操作，能够提高程序的执行效率以及可读性。


	参考答案：https://blog.csdn.net/k_koris/article/details/80691807
			 C/C++ 语言的做法完全是有意而为，其目的就是允许编译器采用任何求值顺序，
			 使编译器在优化中可以根据需要调整实现表达式求值的指令序列，以得到效率更高的代码。
			 像 Java 那样严格规定表达式的求值顺序和效果，不仅限制了语言的实现方式，还要求更频繁的内存访问（以实现副作用），
			 这些可能带来可观的效率损失。应该说，在这个问题上，C/C++和 Java 的选择都贯彻了它们各自的设计原则，
			 各有所获（C/C++  潜在的效率，Java 更清晰的程序行为），当然也都有所失。
			 还应该指出，大部分程序设计语言实际上都采用了类似 C/C++的规定。

  C/C++  语言的规定告诉我们，任何依赖于特定计算顺序、依赖于在顺序点之间实现修改效果的表达式，
  其结果都没有保证。程序设计中应该贯彻的规则是：如果在任何“完整表达式”（形成一段由顺序点结束的计算）里存在对同一“变量”的多个引用，
  那么表达式里就不应该出现对这一“变量”的副作用。否则就不能保证得到预期结果。